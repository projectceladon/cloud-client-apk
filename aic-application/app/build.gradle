apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'

static def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd_HHmm')
    return formattedDate
}

ext.gitBranchName = {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine {line -> branch = line}
    proc.err.eachLine { line -> println line}
    proc.waitFor()
    return branch
}

ext.gitLastCommit = {
    def commit = ""
    def proc = "git rev-parse --short HEAD".execute()
    proc.in.eachLine {line -> commit = line}
    proc.err.eachLine { line -> println line}
    proc.waitFor()
    return commit
}

android {
    signingConfigs {
        debug {
            storeFile file('../key.jks')
            storePassword '111111'
            keyPassword '111111'
            keyAlias = 'key0'
        }
    }
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "0.32"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled = true
        renderscriptTargetApi 18
        renderscriptSupportModeEnabled true
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
            }
        }
        ndk {
            moduleName "gaclient"
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi-v7a', "arm64-v8a", "x86", "x86_64"
        }
        signingConfig signingConfigs.debug
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BUILD_BRANCH", "\"${gitBranchName.call()}\""
            buildConfigField "String", "BUILD_COMMIT", "\"${gitLastCommit.call()}\""
            buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
        }
        debug {
            buildConfigField "String", "BUILD_BRANCH", "\"${gitBranchName.call()}\""
            buildConfigField "String", "BUILD_COMMIT", "\"${gitLastCommit.call()}\""
            buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
        }
    }
    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            proto {
                srcDirs = ['src/main/proto']
            }
        }

    }
    compileSdkVersion = rootProject.ext.compileSdkVersion
    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                outputFileName = "AIC-${buildType.name}-v${defaultConfig.versionName}-${gitLastCommit.call()}.apk"
            }
    }
}
protobuf {
    //Configure the protoc compiler
    protoc {
        artifact = 'com.google.protobuf:protoc:3.2.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.builtins {
                java {}
                // Add cpp output without any option.
                // DO NOT omit the braces if you want this builtin to be added.
            }
        }
    }
    //generated java class file directory
    generatedFilesBaseDir = "$projectDir/src/generated"
}


dependencies {
    implementation fileTree(include: ['*.?ar'], dir: 'libs')
    implementation files('libs/owt_base.aar')
    implementation files('libs/owt_p2p.aar')
    implementation files('libs/owt_conference.aar')
    implementation project(':commonlibrary')

    //support
    implementation rootProject.ext.support.appcompat
    implementation rootProject.ext.support.constraint_layout
    testImplementation rootProject.ext.support.junit
    androidTestImplementation rootProject.ext.support.test_runner
    androidTestImplementation rootProject.ext.support.espresso
    implementation rootProject.ext.support.material
    implementation rootProject.ext.support.lifecycle
    implementation rootProject.ext.support.cardview

    //kotlin
    implementation rootProject.ext.dependencies.kotlin_stdlib
    implementation rootProject.ext.dependencies.kotlin_stdlib_jdk7
    implementation rootProject.ext.dependencies.kotlin_stdlib_jdk8

    // proto
    implementation rootProject.ext.dependencies.protobuf_java
    implementation rootProject.ext.dependencies.protoc
    implementation rootProject.ext.dependencies.protobuf_java_util

    implementation rootProject.ext.dependencies.glide
    annotationProcessor rootProject.ext.dependencies.glide_compiler
    annotationProcessor rootProject.ext.support.annotation

    implementation rootProject.ext.dependencies.guava
    implementation rootProject.ext.dependencies.commons_text
    implementation(rootProject.ext.dependencies.socket_io_client) {
        // excluding org.json which is provided by Android
        exclude group: 'org.json', module: 'json'
    }
    // FileUtils
    implementation rootProject.ext.dependencies.commons_io
    // FastSharedPreferences
    implementation rootProject.ext.dependencies.fast_sharedpreferences
    // LiveEventBus
    implementation rootProject.ext.dependencies.live_event_bus_x
    // XXPermission
    implementation rootProject.ext.dependencies.xx_permissions

    // Anko
    implementation rootProject.ext.dependencies.anko
    // Anko Commons
    implementation rootProject.ext.dependencies.anko_commons
    // Support-v4 (only Anko Commons)
    implementation rootProject.ext.dependencies.anko_support_v4_commons
    // Support-v4 (Anko Layouts)
    implementation rootProject.ext.dependencies.anko_support_v4
    // Coroutine listeners for Anko Layouts
    implementation rootProject.ext.dependencies.anko_sdk25_coroutines
    implementation rootProject.ext.dependencies.anko_appcompat_v7_coroutines

}
