/* Copyright (C) 2021 Intel Corporation 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at
 *   
 *	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 * SPDX-License-Identifier: Apache-2.0
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LatencyMsg.proto

package E2ELatency;

public final class LatencyMsgOuterClass {
  private LatencyMsgOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface LatencyMsgOrBuilder extends
      // @@protoc_insertion_point(interface_extends:E2ELatency.LatencyMsg)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Client side (befor sending to server side)
     * </pre>
     *
     * <code>uint64 client_msg_create_time = 1;</code>
     */
    long getClientMsgCreateTime();

    /**
     * <pre>
     * Frame no on client when message sent
     * </pre>
     *
     * <code>uint32 client_frame_id = 2;</code>
     */
    int getClientFrameId();

    /**
     * <pre>
     * Input trigger time stamp
     * </pre>
     *
     * <code>uint64 client_input_time = 3;</code>
     */
    long getClientInputTime();

    /**
     * <pre>
     * Time stamp before client send this message
     * </pre>
     *
     * <code>uint64 client_send_time = 4;</code>
     */
    long getClientSendTime();

    /**
     * <pre>
     * Server side
     * </pre>
     *
     * <code>uint64 server_received_time = 5;</code>
     */
    long getServerReceivedTime();

    /**
     * <pre>
     * Time stamp when input message is handled by game process
     * </pre>
     *
     * <code>uint64 server_input_processed_time = 6;</code>
     */
    long getServerInputProcessedTime();

    /**
     * <pre>
     * Frame no when server received this message
     * </pre>
     *
     * <code>uint32 server_processing_frame_id = 7;</code>
     */
    int getServerProcessingFrameId();

    /**
     * <pre>
     * Frame no of last sent frame
     * </pre>
     *
     * <code>uint32 server_last_processed_frame_id = 8;</code>
     */
    int getServerLastProcessedFrameId();

    /**
     * <pre>
     * Frame render time
     * </pre>
     *
     * <code>uint32 server_render_time = 9;</code>
     */
    int getServerRenderTime();

    /**
     * <pre>
     * Frame encode time
     * </pre>
     *
     * <code>uint32 server_encode_time = 10;</code>
     */
    int getServerEncodeTime();

    /**
     * <pre>
     * Time stamp when server send this message to client
     * </pre>
     *
     * <code>uint64 server_send_time = 11;</code>
     */
    long getServerSendTime();

    /**
     * <pre>
     * Client side (after receivign from server side)
     * </pre>
     *
     * <code>uint64 client_received_time = 12;</code>
     */
    long getClientReceivedTime();

    /**
     * <pre>
     * Frame decode time
     * </pre>
     *
     * <code>uint64 client_decode_time = 13;</code>
     */
    long getClientDecodeTime();

    /**
     * <pre>
     * Frame render time
     * </pre>
     *
     * <code>uint64 client_render_time = 14;</code>
     */
    long getClientRenderTime();

    /**
     * <pre>
     * Time stamp before Present
     * </pre>
     *
     * <code>uint64 client_present_time = 15;</code>
     */
    long getClientPresentTime();
  }
  /**
   * <pre>
   * Following members ordered in the way we capture timestamps
   * Note: All timestamps are in nanoseconds
   * </pre>
   *
   * Protobuf type {@code E2ELatency.LatencyMsg}
   */
  public  static final class LatencyMsg extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:E2ELatency.LatencyMsg)
      LatencyMsgOrBuilder {
    // Use LatencyMsg.newBuilder() to construct.
    private LatencyMsg(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LatencyMsg() {
      clientMsgCreateTime_ = 0L;
      clientFrameId_ = 0;
      clientInputTime_ = 0L;
      clientSendTime_ = 0L;
      serverReceivedTime_ = 0L;
      serverInputProcessedTime_ = 0L;
      serverProcessingFrameId_ = 0;
      serverLastProcessedFrameId_ = 0;
      serverRenderTime_ = 0;
      serverEncodeTime_ = 0;
      serverSendTime_ = 0L;
      clientReceivedTime_ = 0L;
      clientDecodeTime_ = 0L;
      clientRenderTime_ = 0L;
      clientPresentTime_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private LatencyMsg(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              clientMsgCreateTime_ = input.readUInt64();
              break;
            }
            case 16: {

              clientFrameId_ = input.readUInt32();
              break;
            }
            case 24: {

              clientInputTime_ = input.readUInt64();
              break;
            }
            case 32: {

              clientSendTime_ = input.readUInt64();
              break;
            }
            case 40: {

              serverReceivedTime_ = input.readUInt64();
              break;
            }
            case 48: {

              serverInputProcessedTime_ = input.readUInt64();
              break;
            }
            case 56: {

              serverProcessingFrameId_ = input.readUInt32();
              break;
            }
            case 64: {

              serverLastProcessedFrameId_ = input.readUInt32();
              break;
            }
            case 72: {

              serverRenderTime_ = input.readUInt32();
              break;
            }
            case 80: {

              serverEncodeTime_ = input.readUInt32();
              break;
            }
            case 88: {

              serverSendTime_ = input.readUInt64();
              break;
            }
            case 96: {

              clientReceivedTime_ = input.readUInt64();
              break;
            }
            case 104: {

              clientDecodeTime_ = input.readUInt64();
              break;
            }
            case 112: {

              clientRenderTime_ = input.readUInt64();
              break;
            }
            case 120: {

              clientPresentTime_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return E2ELatency.LatencyMsgOuterClass.internal_static_E2ELatency_LatencyMsg_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return E2ELatency.LatencyMsgOuterClass.internal_static_E2ELatency_LatencyMsg_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              E2ELatency.LatencyMsgOuterClass.LatencyMsg.class, E2ELatency.LatencyMsgOuterClass.LatencyMsg.Builder.class);
    }

    public static final int CLIENT_MSG_CREATE_TIME_FIELD_NUMBER = 1;
    private long clientMsgCreateTime_;
    /**
     * <pre>
     * Client side (befor sending to server side)
     * </pre>
     *
     * <code>uint64 client_msg_create_time = 1;</code>
     */
    public long getClientMsgCreateTime() {
      return clientMsgCreateTime_;
    }

    public static final int CLIENT_FRAME_ID_FIELD_NUMBER = 2;
    private int clientFrameId_;
    /**
     * <pre>
     * Frame no on client when message sent
     * </pre>
     *
     * <code>uint32 client_frame_id = 2;</code>
     */
    public int getClientFrameId() {
      return clientFrameId_;
    }

    public static final int CLIENT_INPUT_TIME_FIELD_NUMBER = 3;
    private long clientInputTime_;
    /**
     * <pre>
     * Input trigger time stamp
     * </pre>
     *
     * <code>uint64 client_input_time = 3;</code>
     */
    public long getClientInputTime() {
      return clientInputTime_;
    }

    public static final int CLIENT_SEND_TIME_FIELD_NUMBER = 4;
    private long clientSendTime_;
    /**
     * <pre>
     * Time stamp before client send this message
     * </pre>
     *
     * <code>uint64 client_send_time = 4;</code>
     */
    public long getClientSendTime() {
      return clientSendTime_;
    }

    public static final int SERVER_RECEIVED_TIME_FIELD_NUMBER = 5;
    private long serverReceivedTime_;
    /**
     * <pre>
     * Server side
     * </pre>
     *
     * <code>uint64 server_received_time = 5;</code>
     */
    public long getServerReceivedTime() {
      return serverReceivedTime_;
    }

    public static final int SERVER_INPUT_PROCESSED_TIME_FIELD_NUMBER = 6;
    private long serverInputProcessedTime_;
    /**
     * <pre>
     * Time stamp when input message is handled by game process
     * </pre>
     *
     * <code>uint64 server_input_processed_time = 6;</code>
     */
    public long getServerInputProcessedTime() {
      return serverInputProcessedTime_;
    }

    public static final int SERVER_PROCESSING_FRAME_ID_FIELD_NUMBER = 7;
    private int serverProcessingFrameId_;
    /**
     * <pre>
     * Frame no when server received this message
     * </pre>
     *
     * <code>uint32 server_processing_frame_id = 7;</code>
     */
    public int getServerProcessingFrameId() {
      return serverProcessingFrameId_;
    }

    public static final int SERVER_LAST_PROCESSED_FRAME_ID_FIELD_NUMBER = 8;
    private int serverLastProcessedFrameId_;
    /**
     * <pre>
     * Frame no of last sent frame
     * </pre>
     *
     * <code>uint32 server_last_processed_frame_id = 8;</code>
     */
    public int getServerLastProcessedFrameId() {
      return serverLastProcessedFrameId_;
    }

    public static final int SERVER_RENDER_TIME_FIELD_NUMBER = 9;
    private int serverRenderTime_;
    /**
     * <pre>
     * Frame render time
     * </pre>
     *
     * <code>uint32 server_render_time = 9;</code>
     */
    public int getServerRenderTime() {
      return serverRenderTime_;
    }

    public static final int SERVER_ENCODE_TIME_FIELD_NUMBER = 10;
    private int serverEncodeTime_;
    /**
     * <pre>
     * Frame encode time
     * </pre>
     *
     * <code>uint32 server_encode_time = 10;</code>
     */
    public int getServerEncodeTime() {
      return serverEncodeTime_;
    }

    public static final int SERVER_SEND_TIME_FIELD_NUMBER = 11;
    private long serverSendTime_;
    /**
     * <pre>
     * Time stamp when server send this message to client
     * </pre>
     *
     * <code>uint64 server_send_time = 11;</code>
     */
    public long getServerSendTime() {
      return serverSendTime_;
    }

    public static final int CLIENT_RECEIVED_TIME_FIELD_NUMBER = 12;
    private long clientReceivedTime_;
    /**
     * <pre>
     * Client side (after receivign from server side)
     * </pre>
     *
     * <code>uint64 client_received_time = 12;</code>
     */
    public long getClientReceivedTime() {
      return clientReceivedTime_;
    }

    public static final int CLIENT_DECODE_TIME_FIELD_NUMBER = 13;
    private long clientDecodeTime_;
    /**
     * <pre>
     * Frame decode time
     * </pre>
     *
     * <code>uint64 client_decode_time = 13;</code>
     */
    public long getClientDecodeTime() {
      return clientDecodeTime_;
    }

    public static final int CLIENT_RENDER_TIME_FIELD_NUMBER = 14;
    private long clientRenderTime_;
    /**
     * <pre>
     * Frame render time
     * </pre>
     *
     * <code>uint64 client_render_time = 14;</code>
     */
    public long getClientRenderTime() {
      return clientRenderTime_;
    }

    public static final int CLIENT_PRESENT_TIME_FIELD_NUMBER = 15;
    private long clientPresentTime_;
    /**
     * <pre>
     * Time stamp before Present
     * </pre>
     *
     * <code>uint64 client_present_time = 15;</code>
     */
    public long getClientPresentTime() {
      return clientPresentTime_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (clientMsgCreateTime_ != 0L) {
        output.writeUInt64(1, clientMsgCreateTime_);
      }
      if (clientFrameId_ != 0) {
        output.writeUInt32(2, clientFrameId_);
      }
      if (clientInputTime_ != 0L) {
        output.writeUInt64(3, clientInputTime_);
      }
      if (clientSendTime_ != 0L) {
        output.writeUInt64(4, clientSendTime_);
      }
      if (serverReceivedTime_ != 0L) {
        output.writeUInt64(5, serverReceivedTime_);
      }
      if (serverInputProcessedTime_ != 0L) {
        output.writeUInt64(6, serverInputProcessedTime_);
      }
      if (serverProcessingFrameId_ != 0) {
        output.writeUInt32(7, serverProcessingFrameId_);
      }
      if (serverLastProcessedFrameId_ != 0) {
        output.writeUInt32(8, serverLastProcessedFrameId_);
      }
      if (serverRenderTime_ != 0) {
        output.writeUInt32(9, serverRenderTime_);
      }
      if (serverEncodeTime_ != 0) {
        output.writeUInt32(10, serverEncodeTime_);
      }
      if (serverSendTime_ != 0L) {
        output.writeUInt64(11, serverSendTime_);
      }
      if (clientReceivedTime_ != 0L) {
        output.writeUInt64(12, clientReceivedTime_);
      }
      if (clientDecodeTime_ != 0L) {
        output.writeUInt64(13, clientDecodeTime_);
      }
      if (clientRenderTime_ != 0L) {
        output.writeUInt64(14, clientRenderTime_);
      }
      if (clientPresentTime_ != 0L) {
        output.writeUInt64(15, clientPresentTime_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (clientMsgCreateTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, clientMsgCreateTime_);
      }
      if (clientFrameId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, clientFrameId_);
      }
      if (clientInputTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, clientInputTime_);
      }
      if (clientSendTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, clientSendTime_);
      }
      if (serverReceivedTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, serverReceivedTime_);
      }
      if (serverInputProcessedTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, serverInputProcessedTime_);
      }
      if (serverProcessingFrameId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, serverProcessingFrameId_);
      }
      if (serverLastProcessedFrameId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, serverLastProcessedFrameId_);
      }
      if (serverRenderTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, serverRenderTime_);
      }
      if (serverEncodeTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, serverEncodeTime_);
      }
      if (serverSendTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(11, serverSendTime_);
      }
      if (clientReceivedTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(12, clientReceivedTime_);
      }
      if (clientDecodeTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(13, clientDecodeTime_);
      }
      if (clientRenderTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(14, clientRenderTime_);
      }
      if (clientPresentTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(15, clientPresentTime_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof E2ELatency.LatencyMsgOuterClass.LatencyMsg)) {
        return super.equals(obj);
      }
      E2ELatency.LatencyMsgOuterClass.LatencyMsg other = (E2ELatency.LatencyMsgOuterClass.LatencyMsg) obj;

      boolean result = true;
      result = result && (getClientMsgCreateTime()
          == other.getClientMsgCreateTime());
      result = result && (getClientFrameId()
          == other.getClientFrameId());
      result = result && (getClientInputTime()
          == other.getClientInputTime());
      result = result && (getClientSendTime()
          == other.getClientSendTime());
      result = result && (getServerReceivedTime()
          == other.getServerReceivedTime());
      result = result && (getServerInputProcessedTime()
          == other.getServerInputProcessedTime());
      result = result && (getServerProcessingFrameId()
          == other.getServerProcessingFrameId());
      result = result && (getServerLastProcessedFrameId()
          == other.getServerLastProcessedFrameId());
      result = result && (getServerRenderTime()
          == other.getServerRenderTime());
      result = result && (getServerEncodeTime()
          == other.getServerEncodeTime());
      result = result && (getServerSendTime()
          == other.getServerSendTime());
      result = result && (getClientReceivedTime()
          == other.getClientReceivedTime());
      result = result && (getClientDecodeTime()
          == other.getClientDecodeTime());
      result = result && (getClientRenderTime()
          == other.getClientRenderTime());
      result = result && (getClientPresentTime()
          == other.getClientPresentTime());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CLIENT_MSG_CREATE_TIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getClientMsgCreateTime());
      hash = (37 * hash) + CLIENT_FRAME_ID_FIELD_NUMBER;
      hash = (53 * hash) + getClientFrameId();
      hash = (37 * hash) + CLIENT_INPUT_TIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getClientInputTime());
      hash = (37 * hash) + CLIENT_SEND_TIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getClientSendTime());
      hash = (37 * hash) + SERVER_RECEIVED_TIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getServerReceivedTime());
      hash = (37 * hash) + SERVER_INPUT_PROCESSED_TIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getServerInputProcessedTime());
      hash = (37 * hash) + SERVER_PROCESSING_FRAME_ID_FIELD_NUMBER;
      hash = (53 * hash) + getServerProcessingFrameId();
      hash = (37 * hash) + SERVER_LAST_PROCESSED_FRAME_ID_FIELD_NUMBER;
      hash = (53 * hash) + getServerLastProcessedFrameId();
      hash = (37 * hash) + SERVER_RENDER_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getServerRenderTime();
      hash = (37 * hash) + SERVER_ENCODE_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getServerEncodeTime();
      hash = (37 * hash) + SERVER_SEND_TIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getServerSendTime());
      hash = (37 * hash) + CLIENT_RECEIVED_TIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getClientReceivedTime());
      hash = (37 * hash) + CLIENT_DECODE_TIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getClientDecodeTime());
      hash = (37 * hash) + CLIENT_RENDER_TIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getClientRenderTime());
      hash = (37 * hash) + CLIENT_PRESENT_TIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getClientPresentTime());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static E2ELatency.LatencyMsgOuterClass.LatencyMsg parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static E2ELatency.LatencyMsgOuterClass.LatencyMsg parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static E2ELatency.LatencyMsgOuterClass.LatencyMsg parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static E2ELatency.LatencyMsgOuterClass.LatencyMsg parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static E2ELatency.LatencyMsgOuterClass.LatencyMsg parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static E2ELatency.LatencyMsgOuterClass.LatencyMsg parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static E2ELatency.LatencyMsgOuterClass.LatencyMsg parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static E2ELatency.LatencyMsgOuterClass.LatencyMsg parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static E2ELatency.LatencyMsgOuterClass.LatencyMsg parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static E2ELatency.LatencyMsgOuterClass.LatencyMsg parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(E2ELatency.LatencyMsgOuterClass.LatencyMsg prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Following members ordered in the way we capture timestamps
     * Note: All timestamps are in nanoseconds
     * </pre>
     *
     * Protobuf type {@code E2ELatency.LatencyMsg}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:E2ELatency.LatencyMsg)
        E2ELatency.LatencyMsgOuterClass.LatencyMsgOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return E2ELatency.LatencyMsgOuterClass.internal_static_E2ELatency_LatencyMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return E2ELatency.LatencyMsgOuterClass.internal_static_E2ELatency_LatencyMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                E2ELatency.LatencyMsgOuterClass.LatencyMsg.class, E2ELatency.LatencyMsgOuterClass.LatencyMsg.Builder.class);
      }

      // Construct using E2ELatency.LatencyMsgOuterClass.LatencyMsg.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        clientMsgCreateTime_ = 0L;

        clientFrameId_ = 0;

        clientInputTime_ = 0L;

        clientSendTime_ = 0L;

        serverReceivedTime_ = 0L;

        serverInputProcessedTime_ = 0L;

        serverProcessingFrameId_ = 0;

        serverLastProcessedFrameId_ = 0;

        serverRenderTime_ = 0;

        serverEncodeTime_ = 0;

        serverSendTime_ = 0L;

        clientReceivedTime_ = 0L;

        clientDecodeTime_ = 0L;

        clientRenderTime_ = 0L;

        clientPresentTime_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return E2ELatency.LatencyMsgOuterClass.internal_static_E2ELatency_LatencyMsg_descriptor;
      }

      public E2ELatency.LatencyMsgOuterClass.LatencyMsg getDefaultInstanceForType() {
        return E2ELatency.LatencyMsgOuterClass.LatencyMsg.getDefaultInstance();
      }

      public E2ELatency.LatencyMsgOuterClass.LatencyMsg build() {
        E2ELatency.LatencyMsgOuterClass.LatencyMsg result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public E2ELatency.LatencyMsgOuterClass.LatencyMsg buildPartial() {
        E2ELatency.LatencyMsgOuterClass.LatencyMsg result = new E2ELatency.LatencyMsgOuterClass.LatencyMsg(this);
        result.clientMsgCreateTime_ = clientMsgCreateTime_;
        result.clientFrameId_ = clientFrameId_;
        result.clientInputTime_ = clientInputTime_;
        result.clientSendTime_ = clientSendTime_;
        result.serverReceivedTime_ = serverReceivedTime_;
        result.serverInputProcessedTime_ = serverInputProcessedTime_;
        result.serverProcessingFrameId_ = serverProcessingFrameId_;
        result.serverLastProcessedFrameId_ = serverLastProcessedFrameId_;
        result.serverRenderTime_ = serverRenderTime_;
        result.serverEncodeTime_ = serverEncodeTime_;
        result.serverSendTime_ = serverSendTime_;
        result.clientReceivedTime_ = clientReceivedTime_;
        result.clientDecodeTime_ = clientDecodeTime_;
        result.clientRenderTime_ = clientRenderTime_;
        result.clientPresentTime_ = clientPresentTime_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof E2ELatency.LatencyMsgOuterClass.LatencyMsg) {
          return mergeFrom((E2ELatency.LatencyMsgOuterClass.LatencyMsg)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(E2ELatency.LatencyMsgOuterClass.LatencyMsg other) {
        if (other == E2ELatency.LatencyMsgOuterClass.LatencyMsg.getDefaultInstance()) return this;
        if (other.getClientMsgCreateTime() != 0L) {
          setClientMsgCreateTime(other.getClientMsgCreateTime());
        }
        if (other.getClientFrameId() != 0) {
          setClientFrameId(other.getClientFrameId());
        }
        if (other.getClientInputTime() != 0L) {
          setClientInputTime(other.getClientInputTime());
        }
        if (other.getClientSendTime() != 0L) {
          setClientSendTime(other.getClientSendTime());
        }
        if (other.getServerReceivedTime() != 0L) {
          setServerReceivedTime(other.getServerReceivedTime());
        }
        if (other.getServerInputProcessedTime() != 0L) {
          setServerInputProcessedTime(other.getServerInputProcessedTime());
        }
        if (other.getServerProcessingFrameId() != 0) {
          setServerProcessingFrameId(other.getServerProcessingFrameId());
        }
        if (other.getServerLastProcessedFrameId() != 0) {
          setServerLastProcessedFrameId(other.getServerLastProcessedFrameId());
        }
        if (other.getServerRenderTime() != 0) {
          setServerRenderTime(other.getServerRenderTime());
        }
        if (other.getServerEncodeTime() != 0) {
          setServerEncodeTime(other.getServerEncodeTime());
        }
        if (other.getServerSendTime() != 0L) {
          setServerSendTime(other.getServerSendTime());
        }
        if (other.getClientReceivedTime() != 0L) {
          setClientReceivedTime(other.getClientReceivedTime());
        }
        if (other.getClientDecodeTime() != 0L) {
          setClientDecodeTime(other.getClientDecodeTime());
        }
        if (other.getClientRenderTime() != 0L) {
          setClientRenderTime(other.getClientRenderTime());
        }
        if (other.getClientPresentTime() != 0L) {
          setClientPresentTime(other.getClientPresentTime());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        E2ELatency.LatencyMsgOuterClass.LatencyMsg parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (E2ELatency.LatencyMsgOuterClass.LatencyMsg) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long clientMsgCreateTime_ ;
      /**
       * <pre>
       * Client side (befor sending to server side)
       * </pre>
       *
       * <code>uint64 client_msg_create_time = 1;</code>
       */
      public long getClientMsgCreateTime() {
        return clientMsgCreateTime_;
      }
      /**
       * <pre>
       * Client side (befor sending to server side)
       * </pre>
       *
       * <code>uint64 client_msg_create_time = 1;</code>
       */
      public Builder setClientMsgCreateTime(long value) {
        
        clientMsgCreateTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Client side (befor sending to server side)
       * </pre>
       *
       * <code>uint64 client_msg_create_time = 1;</code>
       */
      public Builder clearClientMsgCreateTime() {
        
        clientMsgCreateTime_ = 0L;
        onChanged();
        return this;
      }

      private int clientFrameId_ ;
      /**
       * <pre>
       * Frame no on client when message sent
       * </pre>
       *
       * <code>uint32 client_frame_id = 2;</code>
       */
      public int getClientFrameId() {
        return clientFrameId_;
      }
      /**
       * <pre>
       * Frame no on client when message sent
       * </pre>
       *
       * <code>uint32 client_frame_id = 2;</code>
       */
      public Builder setClientFrameId(int value) {
        
        clientFrameId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Frame no on client when message sent
       * </pre>
       *
       * <code>uint32 client_frame_id = 2;</code>
       */
      public Builder clearClientFrameId() {
        
        clientFrameId_ = 0;
        onChanged();
        return this;
      }

      private long clientInputTime_ ;
      /**
       * <pre>
       * Input trigger time stamp
       * </pre>
       *
       * <code>uint64 client_input_time = 3;</code>
       */
      public long getClientInputTime() {
        return clientInputTime_;
      }
      /**
       * <pre>
       * Input trigger time stamp
       * </pre>
       *
       * <code>uint64 client_input_time = 3;</code>
       */
      public Builder setClientInputTime(long value) {
        
        clientInputTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Input trigger time stamp
       * </pre>
       *
       * <code>uint64 client_input_time = 3;</code>
       */
      public Builder clearClientInputTime() {
        
        clientInputTime_ = 0L;
        onChanged();
        return this;
      }

      private long clientSendTime_ ;
      /**
       * <pre>
       * Time stamp before client send this message
       * </pre>
       *
       * <code>uint64 client_send_time = 4;</code>
       */
      public long getClientSendTime() {
        return clientSendTime_;
      }
      /**
       * <pre>
       * Time stamp before client send this message
       * </pre>
       *
       * <code>uint64 client_send_time = 4;</code>
       */
      public Builder setClientSendTime(long value) {
        
        clientSendTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Time stamp before client send this message
       * </pre>
       *
       * <code>uint64 client_send_time = 4;</code>
       */
      public Builder clearClientSendTime() {
        
        clientSendTime_ = 0L;
        onChanged();
        return this;
      }

      private long serverReceivedTime_ ;
      /**
       * <pre>
       * Server side
       * </pre>
       *
       * <code>uint64 server_received_time = 5;</code>
       */
      public long getServerReceivedTime() {
        return serverReceivedTime_;
      }
      /**
       * <pre>
       * Server side
       * </pre>
       *
       * <code>uint64 server_received_time = 5;</code>
       */
      public Builder setServerReceivedTime(long value) {
        
        serverReceivedTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server side
       * </pre>
       *
       * <code>uint64 server_received_time = 5;</code>
       */
      public Builder clearServerReceivedTime() {
        
        serverReceivedTime_ = 0L;
        onChanged();
        return this;
      }

      private long serverInputProcessedTime_ ;
      /**
       * <pre>
       * Time stamp when input message is handled by game process
       * </pre>
       *
       * <code>uint64 server_input_processed_time = 6;</code>
       */
      public long getServerInputProcessedTime() {
        return serverInputProcessedTime_;
      }
      /**
       * <pre>
       * Time stamp when input message is handled by game process
       * </pre>
       *
       * <code>uint64 server_input_processed_time = 6;</code>
       */
      public Builder setServerInputProcessedTime(long value) {
        
        serverInputProcessedTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Time stamp when input message is handled by game process
       * </pre>
       *
       * <code>uint64 server_input_processed_time = 6;</code>
       */
      public Builder clearServerInputProcessedTime() {
        
        serverInputProcessedTime_ = 0L;
        onChanged();
        return this;
      }

      private int serverProcessingFrameId_ ;
      /**
       * <pre>
       * Frame no when server received this message
       * </pre>
       *
       * <code>uint32 server_processing_frame_id = 7;</code>
       */
      public int getServerProcessingFrameId() {
        return serverProcessingFrameId_;
      }
      /**
       * <pre>
       * Frame no when server received this message
       * </pre>
       *
       * <code>uint32 server_processing_frame_id = 7;</code>
       */
      public Builder setServerProcessingFrameId(int value) {
        
        serverProcessingFrameId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Frame no when server received this message
       * </pre>
       *
       * <code>uint32 server_processing_frame_id = 7;</code>
       */
      public Builder clearServerProcessingFrameId() {
        
        serverProcessingFrameId_ = 0;
        onChanged();
        return this;
      }

      private int serverLastProcessedFrameId_ ;
      /**
       * <pre>
       * Frame no of last sent frame
       * </pre>
       *
       * <code>uint32 server_last_processed_frame_id = 8;</code>
       */
      public int getServerLastProcessedFrameId() {
        return serverLastProcessedFrameId_;
      }
      /**
       * <pre>
       * Frame no of last sent frame
       * </pre>
       *
       * <code>uint32 server_last_processed_frame_id = 8;</code>
       */
      public Builder setServerLastProcessedFrameId(int value) {
        
        serverLastProcessedFrameId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Frame no of last sent frame
       * </pre>
       *
       * <code>uint32 server_last_processed_frame_id = 8;</code>
       */
      public Builder clearServerLastProcessedFrameId() {
        
        serverLastProcessedFrameId_ = 0;
        onChanged();
        return this;
      }

      private int serverRenderTime_ ;
      /**
       * <pre>
       * Frame render time
       * </pre>
       *
       * <code>uint32 server_render_time = 9;</code>
       */
      public int getServerRenderTime() {
        return serverRenderTime_;
      }
      /**
       * <pre>
       * Frame render time
       * </pre>
       *
       * <code>uint32 server_render_time = 9;</code>
       */
      public Builder setServerRenderTime(int value) {
        
        serverRenderTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Frame render time
       * </pre>
       *
       * <code>uint32 server_render_time = 9;</code>
       */
      public Builder clearServerRenderTime() {
        
        serverRenderTime_ = 0;
        onChanged();
        return this;
      }

      private int serverEncodeTime_ ;
      /**
       * <pre>
       * Frame encode time
       * </pre>
       *
       * <code>uint32 server_encode_time = 10;</code>
       */
      public int getServerEncodeTime() {
        return serverEncodeTime_;
      }
      /**
       * <pre>
       * Frame encode time
       * </pre>
       *
       * <code>uint32 server_encode_time = 10;</code>
       */
      public Builder setServerEncodeTime(int value) {
        
        serverEncodeTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Frame encode time
       * </pre>
       *
       * <code>uint32 server_encode_time = 10;</code>
       */
      public Builder clearServerEncodeTime() {
        
        serverEncodeTime_ = 0;
        onChanged();
        return this;
      }

      private long serverSendTime_ ;
      /**
       * <pre>
       * Time stamp when server send this message to client
       * </pre>
       *
       * <code>uint64 server_send_time = 11;</code>
       */
      public long getServerSendTime() {
        return serverSendTime_;
      }
      /**
       * <pre>
       * Time stamp when server send this message to client
       * </pre>
       *
       * <code>uint64 server_send_time = 11;</code>
       */
      public Builder setServerSendTime(long value) {
        
        serverSendTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Time stamp when server send this message to client
       * </pre>
       *
       * <code>uint64 server_send_time = 11;</code>
       */
      public Builder clearServerSendTime() {
        
        serverSendTime_ = 0L;
        onChanged();
        return this;
      }

      private long clientReceivedTime_ ;
      /**
       * <pre>
       * Client side (after receivign from server side)
       * </pre>
       *
       * <code>uint64 client_received_time = 12;</code>
       */
      public long getClientReceivedTime() {
        return clientReceivedTime_;
      }
      /**
       * <pre>
       * Client side (after receivign from server side)
       * </pre>
       *
       * <code>uint64 client_received_time = 12;</code>
       */
      public Builder setClientReceivedTime(long value) {
        
        clientReceivedTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Client side (after receivign from server side)
       * </pre>
       *
       * <code>uint64 client_received_time = 12;</code>
       */
      public Builder clearClientReceivedTime() {
        
        clientReceivedTime_ = 0L;
        onChanged();
        return this;
      }

      private long clientDecodeTime_ ;
      /**
       * <pre>
       * Frame decode time
       * </pre>
       *
       * <code>uint64 client_decode_time = 13;</code>
       */
      public long getClientDecodeTime() {
        return clientDecodeTime_;
      }
      /**
       * <pre>
       * Frame decode time
       * </pre>
       *
       * <code>uint64 client_decode_time = 13;</code>
       */
      public Builder setClientDecodeTime(long value) {
        
        clientDecodeTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Frame decode time
       * </pre>
       *
       * <code>uint64 client_decode_time = 13;</code>
       */
      public Builder clearClientDecodeTime() {
        
        clientDecodeTime_ = 0L;
        onChanged();
        return this;
      }

      private long clientRenderTime_ ;
      /**
       * <pre>
       * Frame render time
       * </pre>
       *
       * <code>uint64 client_render_time = 14;</code>
       */
      public long getClientRenderTime() {
        return clientRenderTime_;
      }
      /**
       * <pre>
       * Frame render time
       * </pre>
       *
       * <code>uint64 client_render_time = 14;</code>
       */
      public Builder setClientRenderTime(long value) {
        
        clientRenderTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Frame render time
       * </pre>
       *
       * <code>uint64 client_render_time = 14;</code>
       */
      public Builder clearClientRenderTime() {
        
        clientRenderTime_ = 0L;
        onChanged();
        return this;
      }

      private long clientPresentTime_ ;
      /**
       * <pre>
       * Time stamp before Present
       * </pre>
       *
       * <code>uint64 client_present_time = 15;</code>
       */
      public long getClientPresentTime() {
        return clientPresentTime_;
      }
      /**
       * <pre>
       * Time stamp before Present
       * </pre>
       *
       * <code>uint64 client_present_time = 15;</code>
       */
      public Builder setClientPresentTime(long value) {
        
        clientPresentTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Time stamp before Present
       * </pre>
       *
       * <code>uint64 client_present_time = 15;</code>
       */
      public Builder clearClientPresentTime() {
        
        clientPresentTime_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:E2ELatency.LatencyMsg)
    }

    // @@protoc_insertion_point(class_scope:E2ELatency.LatencyMsg)
    private static final E2ELatency.LatencyMsgOuterClass.LatencyMsg DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new E2ELatency.LatencyMsgOuterClass.LatencyMsg();
    }

    public static E2ELatency.LatencyMsgOuterClass.LatencyMsg getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LatencyMsg>
        PARSER = new com.google.protobuf.AbstractParser<LatencyMsg>() {
      public LatencyMsg parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new LatencyMsg(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LatencyMsg> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LatencyMsg> getParserForType() {
      return PARSER;
    }

    public E2ELatency.LatencyMsgOuterClass.LatencyMsg getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_E2ELatency_LatencyMsg_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_E2ELatency_LatencyMsg_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020LatencyMsg.proto\022\nE2ELatency\"\316\003\n\nLaten" +
      "cyMsg\022\036\n\026client_msg_create_time\030\001 \001(\004\022\027\n" +
      "\017client_frame_id\030\002 \001(\r\022\031\n\021client_input_t" +
      "ime\030\003 \001(\004\022\030\n\020client_send_time\030\004 \001(\004\022\034\n\024s" +
      "erver_received_time\030\005 \001(\004\022#\n\033server_inpu" +
      "t_processed_time\030\006 \001(\004\022\"\n\032server_process" +
      "ing_frame_id\030\007 \001(\r\022&\n\036server_last_proces" +
      "sed_frame_id\030\010 \001(\r\022\032\n\022server_render_time" +
      "\030\t \001(\r\022\032\n\022server_encode_time\030\n \001(\r\022\030\n\020se" +
      "rver_send_time\030\013 \001(\004\022\034\n\024client_received_",
      "time\030\014 \001(\004\022\032\n\022client_decode_time\030\r \001(\004\022\032" +
      "\n\022client_render_time\030\016 \001(\004\022\033\n\023client_pre" +
      "sent_time\030\017 \001(\004b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_E2ELatency_LatencyMsg_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_E2ELatency_LatencyMsg_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_E2ELatency_LatencyMsg_descriptor,
        new java.lang.String[] { "ClientMsgCreateTime", "ClientFrameId", "ClientInputTime", "ClientSendTime", "ServerReceivedTime", "ServerInputProcessedTime", "ServerProcessingFrameId", "ServerLastProcessedFrameId", "ServerRenderTime", "ServerEncodeTime", "ServerSendTime", "ClientReceivedTime", "ClientDecodeTime", "ClientRenderTime", "ClientPresentTime", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
