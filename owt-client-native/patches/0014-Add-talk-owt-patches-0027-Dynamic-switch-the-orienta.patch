From bec5cdc3ed71b6f145b1e40c51deec3538f0f16a Mon Sep 17 00:00:00 2001
From: shipeigx <peigangx.shi@intel.com>
Date: Mon, 14 Mar 2022 13:54:13 +0800
Subject: [PATCH] Add
 talk/owt/patches/0027-Dynamic-switch-the-orientation-of-the-background-of-.patch

Signed-off-by: shipeigx <peigangx.shi@intel.com>
Signed-off-by: Deng, Bing <bing.deng@intel.com>
---
 scripts/prepare_dev.py                        |   1 +
 ...he-orientation-of-the-background-of-.patch | 130 ++++++++++++++++++
 2 files changed, 131 insertions(+)
 create mode 100644 talk/owt/patches/0027-Dynamic-switch-the-orientation-of-the-background-of-.patch

diff --git a/scripts/prepare_dev.py b/scripts/prepare_dev.py
index ea8e834..a998218 100644
--- a/scripts/prepare_dev.py
+++ b/scripts/prepare_dev.py
@@ -53,6 +53,7 @@ patchList = [
     ('0023-Add-atrace-point-that-is-after-decoding.patch', WEBRTC_PATH),
     ('0025-Enable-TCAE-in-webrtc.patch', WEBRTC_PATH),
     ('0026-Set-ContentHint-kDetailed-as-default-value.patch', WEBRTC_PATH),
+    ('0027-Dynamic-switch-the-orientation-of-the-background-of-.patch', WEBRTC_PATH),
 ]
 
 def _patch(ignoreFailures=False):
diff --git a/talk/owt/patches/0027-Dynamic-switch-the-orientation-of-the-background-of-.patch b/talk/owt/patches/0027-Dynamic-switch-the-orientation-of-the-background-of-.patch
new file mode 100644
index 0000000..cb229ae
--- /dev/null
+++ b/talk/owt/patches/0027-Dynamic-switch-the-orientation-of-the-background-of-.patch
@@ -0,0 +1,130 @@
+From b872931423d2386a39d7e0537cb552b34da8a3c8 Mon Sep 17 00:00:00 2001
+From: shipeigx <peigangx.shi@intel.com>
+Date: Fri, 18 Mar 2022 11:17:20 +0800
+Subject: [PATCH] Dynamic switch the orientation of the background of the alpha
+ transparent feature.
+
+Signed-off-by: shipeigx <peigangx.shi@intel.com>
+Signed-off-by: Deng, Bing <bing.deng@intel.com>
+---
+ .../api/org/webrtc/SurfaceViewRenderer.java   | 12 ++++--
+ .../src/java/org/webrtc/GlGenericDrawer.java  | 38 ++++++++++++++-----
+ 2 files changed, 38 insertions(+), 12 deletions(-)
+
+diff --git a/sdk/android/api/org/webrtc/SurfaceViewRenderer.java b/sdk/android/api/org/webrtc/SurfaceViewRenderer.java
+index b41d2e3f03..787aefca15 100644
+--- a/sdk/android/api/org/webrtc/SurfaceViewRenderer.java
++++ b/sdk/android/api/org/webrtc/SurfaceViewRenderer.java
+@@ -41,6 +41,7 @@ public class SurfaceViewRenderer extends SurfaceView
+   private boolean enableFixedSize;
+   private int surfaceWidth;
+   private int surfaceHeight;
++  private GlRectDrawer glRectDrawer;
+ 
+   /**
+    * Standard View constructor. In order to render something, you must first call init().
+@@ -69,13 +70,14 @@ public class SurfaceViewRenderer extends SurfaceView
+    * reinitialize the renderer after a previous init()/release() cycle.
+    */
+   public void init(EglBase.Context sharedContext, RendererCommon.RendererEvents rendererEvents) {
+-    init(sharedContext, rendererEvents, EglBase.CONFIG_PLAIN, new GlRectDrawer());
++    glRectDrawer = new GlRectDrawer();
++    init(sharedContext, rendererEvents, EglBase.CONFIG_PLAIN, glRectDrawer);
+   }
+ 
+   public void init(EglBase.Context sharedContext, boolean alphaChannel,GlDrawerBg background,RendererCommon.RendererEvents rendererEvents) {
+     GlUtil.setAlphaChannel(alphaChannel);
+-    GlRectDrawer glRectDrawer = new GlRectDrawer();
+-    init(sharedContext, rendererEvents, alphaChannel ? EglBase.CONFIG_RGBA : EglBase.CONFIG_PLAIN, new GlRectDrawer().setBackground(background));
++    glRectDrawer = new GlRectDrawer();
++    init(sharedContext, rendererEvents, alphaChannel ? EglBase.CONFIG_RGBA : EglBase.CONFIG_PLAIN, glRectDrawer.setBackground(background));
+   }
+ 
+   /**
+@@ -94,6 +96,10 @@ public class SurfaceViewRenderer extends SurfaceView
+     eglRenderer.init(sharedContext, this /* rendererEvents */, configAttributes, drawer);
+   }
+ 
++  public void setDrawerBg(GlDrawerBg background){
++    glRectDrawer.setBackground(background);
++  }
++
+   /**
+    * Block until any pending frame is returned and all GL resources released, even if an interrupt
+    * occurs. If an interrupt occurs during release(), the interrupt flag will be set. This function
+diff --git a/sdk/android/src/java/org/webrtc/GlGenericDrawer.java b/sdk/android/src/java/org/webrtc/GlGenericDrawer.java
+index 87c2ebfd0b..541f2fe8e0 100644
+--- a/sdk/android/src/java/org/webrtc/GlGenericDrawer.java
++++ b/sdk/android/src/java/org/webrtc/GlGenericDrawer.java
+@@ -147,6 +147,7 @@ class GlGenericDrawer implements RendererCommon.GlDrawer {
+   private int inTcLocation;
+   private int texMatrixLocation;
+   private GlDrawerBg background;
++  private int bgTextureId;
+ 
+   public GlGenericDrawer(String genericFragmentSource, ShaderCallbacks shaderCallbacks) {
+     this(DEFAULT_VERTEX_SHADER_STRING, genericFragmentSource, shaderCallbacks);
+@@ -161,6 +162,7 @@ class GlGenericDrawer implements RendererCommon.GlDrawer {
+ 
+   public GlGenericDrawer setBackground(GlDrawerBg background) {
+     this.background = background;
++    currentChannelStatus = !currentChannelStatus;
+     return this;
+   }
+ 
+@@ -179,18 +181,20 @@ class GlGenericDrawer implements RendererCommon.GlDrawer {
+       int viewportX, int viewportY, int viewportWidth, int viewportHeight) {
+     prepareShader(
+         ShaderType.OES, texMatrix, frameWidth, frameHeight, viewportWidth, viewportHeight);
+-    // Bind base map texture.
+-    if (GlUtil.getAlphaChannel() && background != null) {
+-      GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGB, background.getWidth(), background.getHeight(), 0,
+-              GLES20.GL_RGB, GLES20.GL_UNSIGNED_BYTE, background.getBackground());
+-      GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
+-      GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
+-      GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
+-      GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
+-    }
++
+     // Bind the texture.
+     GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
+     GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, oesTextureId);
++
++    // Bind background texture.
++    if (GlUtil.getAlphaChannel() && background != null) {
++      int bgTextureId = getBgTextureId();
++      GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGB, background.getWidth(), background.getHeight(), 0,
++          GLES20.GL_RGB, GLES20.GL_UNSIGNED_BYTE, background.getBackground());
++      GLES20.glActiveTexture(GLES20.GL_TEXTURE1);
++      GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, bgTextureId);
++    }
++
+     // Draw the texture.
+     GLES20.glViewport(viewportX, viewportY, viewportWidth, viewportHeight);
+     GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
+@@ -198,6 +202,22 @@ class GlGenericDrawer implements RendererCommon.GlDrawer {
+     GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, 0);
+   }
+ 
++  public int getBgTextureId() {
++    if (bgTextureId == 0) {
++      final int backgroundTextureArray[] = new int[1];
++      GLES20.glGenTextures(1, backgroundTextureArray, 0);
++      bgTextureId = backgroundTextureArray[0];
++      GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, bgTextureId);
++      GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
++      GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
++      GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
++      GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
++      return bgTextureId;
++    } else {
++      return bgTextureId;
++    }
++  }
++
+   /**
+    * Draw a RGB(A) texture frame with specified texture transformation matrix. Required resources
+    * are allocated at the first call to this function.
+-- 
+2.25.1
+
-- 
2.25.1

